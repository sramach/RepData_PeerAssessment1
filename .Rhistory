## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
## Creates a special "matrix", which is really a list containing a function to
## *set the matrix
## *get the matrix
## *set the matrix inverse
## *get the matrix inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then cachesolve retrieves
## the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of the matrix inside the cachedMatrix 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
activity.data.temp <-
mutate(activity.data.imputed, daytype = if (weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday") ) {"Weekend"} else {"Weekday"})
library(dplyr)
activity.data.temp <-
mutate(activity.data.imputed, daytype = if (weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday") ) {"Weekend"} else {"Weekday"})
activity.data.imputed <- activity.data
for(i in 1:nrow(activity.data)) {
if(is.na(activity.data[i,1]) == TRUE) {
activity.data.imputed[i,1] <- round(interval.total.steps$total[which(interval.total.steps$interval ==  activity.data[i,3])]/length(unique(activity.data$date)))
}
}
daily.steps.imputed <- activity.data.imputed  %>% group_by(date) %>% summarise(total=sum(steps))
mean.daily.steps.imupted <- mean(daily.steps.imputed$total)
median.daily.steps.imputed <-median(daily.steps.imputed$total)
require(dplyr)
activity.file <- unzip("activity.zip")
activity.data <- read.csv(activity.file)
activity.data.filtered <- na.omit(activity.data)
daily.steps <- activity.data.filtered  %>% group_by(date) %>% summarise(total=sum(steps))
interval.total.steps <- activity.data.filtered %>% group_by(interval) %>% summarise(total=sum(steps))
getwd()
setwd("C:/Users/IBM_ADMIN/Documents/GitHub/RepData_PeerAssessment1")
require(dplyr)
activity.file <- unzip("activity.zip")
activity.data <- read.csv(activity.file)
activity.data.filtered <- na.omit(activity.data)
daily.steps <- activity.data.filtered  %>% group_by(date) %>% summarise(total=sum(steps))
interval.total.steps <- activity.data.filtered %>% group_by(interval) %>% summarise(total=sum(steps))
mean.daily.steps <- mean(daily.steps$total)
median.daily.steps <-median(daily.steps$total)
max.step.interval <- interval.total.steps$interval[which.max(interval.total.steps$total)]
na.steps <- sum(is.na(activity.data$steps))
activity.data.imputed <- activity.data
for(i in 1:nrow(activity.data)) {
if(is.na(activity.data[i,1]) == TRUE) {
activity.data.imputed[i,1] <- round(interval.total.steps$total[which(interval.total.steps$interval ==  activity.data[i,3])]/length(unique(activity.data$date)))
}
}
daily.steps.imputed <- activity.data.imputed  %>% group_by(date) %>% summarise(total=sum(steps))
mean.daily.steps.imupted <- mean(daily.steps.imputed$total)
median.daily.steps.imputed <-median(daily.steps.imputed$total)
y.data.temp <-
mutate(activity.data.imputed, daytype = if (weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday") ) {"Weekend"} else {"Weekday"})
activity.data.temp <-
mutate(activity.data.imputed, daytype = if (weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday") ) {"Weekend"} else {"Weekday"})
day.type <- weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday")
day.type <- weekdays(as.Date(activity.data.imputed$date,"%Y-%m-%d")) %in%  c("Saturday","Sunday")
day.Type
day.type
day.type <- weekdays(as.Date(activity.data.imputed$date,"%Y-%m-%d")) %in% c("Saturday","Sunday")
activity.data.temp <-
mutate(activity.data.imputed, daytype =
runif (weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday") ) {"Weekend"} else {"Weekday"})
activity.data.temp <-
mutate(activity.data.imputed, daytype = runif (weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday") ) {"Weekend"} else {"Weekday"})
activity.data.temp <-
mutate(activity.data.imputed, daytype =
runif (weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday") ) {"Weekend"} else {"Weekday"})
activity.data.temp <-
mutate(activity.data.imputed, daytype =
runif (weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday") ) {"Weekend"} else {"Weekday"} )
activity.data.temp <-
mutate(activity.data.imputed, daytype =
runif (weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday") ) {"Weekend"} else {"Weekday"} )
?runif
activity.data.temp <-
mutate(activity.data.imputed, daytype =
if (weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday") ) {"Weekend"} else {"Weekday"})
activity.data.temp <-
mutate(activity.data.imputed, daytype =
ifelse( weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday"),"Weekend","Weekday")
)
activity.data.temp <-
mutate(activity.data.imputed, daytype =
ifelse( weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday"),"Weekend","Weekday"))
View(activity.data.temp)
unique(activity.data.temp$daytype)
activity.test <- filter(activity.data.temp, $daytype == "Weekend")
activity.test <- filter(activity.data.temp, daytype == "Weekend")
View(activty.test)
View(activity.test)
weekdays(as.Date(activity.test$date,"%Y-%m-%d"))
activity.data.imputed<-
mutate(activity.data.imputed, daytype =
ifelse( weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday"),"Weekend","Weekday"))
library(lattice)
summary(activity.data.imputed)
activity.f <- factor(activity.data.imputed$daytype, levels("Weekday","Weekend"))
activity.f <- factor(activity.data.imputed$daytype, levels(c("Weekday","Weekend")))
View activity.f
View(activity.f)
activity.f <- factor(activity.data.imputed$daytype, levels(c("Weekend","Weekday")))
View(activity.f)
weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday"))
activity.data.imputed<-
mutate(activity.data.imputed, daytype =
weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday"))
View(activity.data.imputed)
activity.f <- factor(activity.data.imputed$daytype, labels(c("Weekend","Weekday")))
View(activity.f)
activity.f <- factor(activity.data.imputed$daytype)
View(activity.f)
View(activity.data.imputed)
levels(activty.f)
levels(activity.f)
activity.f <- factor(activity.data.imputed$daytype, lables("Weekday","Weekend"))
activity.data.imputed<-
mutate(activity.data.imputed, daytype =
ifelse( weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday"),"Weekend","Weekday"))
daytype.factor <- factor(activity.data.imputed$daytype)
View(activity.data.imputed)
View(daytype.factor)
levels(daytype.factor)
activity.data.imputed<-
mutate(activity.data.imputed, daytype =
factor(ifelse( weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday"),"Weekend","Weekday"))
daytype.factor <- factor(activity.data.imputed$daytype)
activity.data.imputed<-
mutate(activity.data.imputed, daytype =
factor(ifelse( weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday"),"Weekend","Weekday"))
daytype.factor <- factor(activity.data.im
activity.data.imputed<-
mutate(activity.data.imputed, daytype =
factor(ifelse( weekdays(as.Date(date,"%Y-%m-%d")) %in% c("Saturday","Sunday"),"Weekend","Weekday")))
View(activity.data.imputed)
levels(activity.data.imputed$daytype)
par(mfrow=c(2,1))
par(bg = "lightskyblue1")
plot(activity.data.imputed$steps~activity.data.imputed$interval|activity.data.imputed.daytype)
plot(activity.data.imputed$steps~activity.data.imputed$interval|activity.data.imputed.$daytype)
View(activity.data.imputed)
plot(activity.data.imputed$steps~activity.data.imputed$interval|activity.data.imputed.daytype)
plot(activity.data.imputed$steps~activity.data.imputed$interval)
plot(activity.data.imputed$steps~activity.data.imputed$interval,type="l")
plot(activity.data.imputed$steps~activity.data.imputed$interval,type="l")
plot(activity.data.imputed$steps~activity.data.imputed$interval|levels(activity.data.imputed$interval$daytype),type="l")
plot(activity.data.imputed$steps~activity.data.imputed$interval|levels(activity.data.imputed$daytype),type="l")
plot(activity.data.imputed$steps~activity.data.imputed$interval,levels(activity.data.imputed$daytype),type="l")
xyplot(steps ~ interval| levels(daytype),
data = activity.data.imputed,
type = "l",
xlab = "Interval",
ylab = "Number of steps",
layout=c(2,1
)
)
xyplot(steps ~ interval| levels(daytype),
data = activity.data.imputed,
type = "l",
xlab = "Interval",
ylab = "Number of steps",
layout=c(1,2))
?xyplot
